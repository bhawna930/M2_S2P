#include <iostream>
#include <thread>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>

using namespace std;
using namespace std::chrono;

void randomVector(int vector[], int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

void addArrays(int result[], int v1[], int v2[], int start, int end) {
    for (int i = start; i < end; i++) {
        result[i] = v1[i] + v2[i];
    }
}

int main() {
    unsigned long size = 100000000; // Size of the arrays
    srand(time(0));

    int *v1 = new int[size];
    int *v2 = new int[size];
    int *v3 = new int[size];

    // Populate arrays with random values
    randomVector(v1, size);
    randomVector(v2, size);

    auto start = high_resolution_clock::now(); // Start measuring time

    const int num_threads = 4; // Number of threads
    vector<thread> threads; // Vector to store thread objects

    // Divide the work among threads
    int chunk_size = size / num_threads;
    int remainder = size % num_threads;
    int start_index = 0;
    for (int i = 0; i < num_threads; i++) {
        int end_index = start_index + chunk_size;
        if (i == num_threads - 1) {
            end_index += remainder;
        }
        threads.push_back(thread(addArrays, v3, v1, v2, start_index, end_index));
        start_index = end_index;
    }

    // Join threads
    for (auto& t : threads) {
        t.join();
    }

    auto stop = high_resolution_clock::now(); // Stop measuring time
    auto duration = duration_cast<microseconds>(stop - start); // Calculate duration

    cout << "Time taken by function: " << duration.count() << " microseconds" << endl; // Print duration

    // Deallocate memory
    delete[] v1;
    delete[] v2;
    delete[] v3;

    return 0;
}
